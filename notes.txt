
///// Without redirection
wget with proxy:
h1 wget --proxy 10.0.0.17:3128 http://10.0.0.2:8080/helloworld
h1 wget -e use_proxy=yes -e http_proxy=10.0.0.17:3128 http://10.0.0.2:8080/helloworld


We MUST set appropriate http headers:
self.send_header('Cache-Control', 'public, max-age=31536000')
self.send_header('ETag', '686897696a7c876b7e')
self.send_header('Date', time.strftime("%a, %d %Y %H:%M:%S GMT"))
self.send_header('Last-Modified', 'Sat, 10 Jun 2010 10:00:00 GMT')


#################################
		IPTABLES (h17)
#################################
sudo iptables -t nat -nvL
sudo iptables -t nat -A OUTPUT --match owner --uid-owner proxy -p tcp --dport 80 --dst 10.0.0.17 -j ACCEPT
sudo iptables -t nat -A OUTPUT -p tcp --dport 80 -j DNAT --to-destination 10.0.0.17:3219


Intercepting proxy == inline cache

Squid compiled from source
http://agratitudesign.blogspot.com/2015/05/building-squid-354-transparent-proxy-on.html

 ./configure --prefix=/usr --localstatedir=/var/squid --libexecdir=${prefix}/lib/squid --srcdir=. --datadir=${prefix}/share/squid --sysconfdir=/etc/squid --with-default-user=proxy --with-logdir=/var/log/squid --with-pidfile=/var/run/squid.pid --enable-delay-pools --enable-cache-digests --enable-poll --enable-linux-netfilter --enable-removal-policies --with-maxfd=8192 --enable-storeio=aufs --disable-wccp --enable-x-accelerator-vary --enable-kill-parent-hack --enable-async-io=30 --disable-ident-lookups --disable-internal-dns

make && make install 



######################################################
	WORKING SQUID INTERCEPTION - TRANSPARENT PROXY
#######################################################

clear arp cache on originating host:
   arp -d 10.0.0.16

Run the cache server on h17: 
	http_port 3128 intercept

For redirection we must POST two ryu commands to ofctl_rest.py which is listening on 127.0.0.1:8080

ARP - OUTGOING:
{
    "dpid": 1,
    "idle_timeout": 30,
    "hard_timeout": 30,
    "priority": 44444,
    "match":{
        "arp_spa": "10.0.0.1",
        "arp_tpa": "10.0.0.16",
        "eth_type": 2054
    },
    "actions":[
        {
            "type": "SET_FIELD",
            "field": "arp_tpa",
            "value": "10.0.0.17",
            "eth_type": 2054
        },
        {
            "type":"OUTPUT",
            "port": 3
        }
    ]
 }

ARP - RETURNING
{
    "dpid": 1,
    "idle_timeout": 30,
    "hard_timeout": 30,
    "priority": 44444,
    "match":{
        "arp_spa": "10.0.0.17",
        "arp_tpa": "10.0.0.1",
        "eth_type": 2054
    },
    "actions":[
        {
            "type": "SET_FIELD",
            "field": "arp_spa",
            "value": "10.0.0.16",
            "eth_type": 2054
        },
        {
            "type":"OUTPUT",
            "port": 1
        }
    ]
 }

With these two commands we capture the ARP packet from originating host h1
"Who has 10.0.0.16? Tell 10.0.0.1"
and change the target ip address (web server) to 10.0.0.17 (cache server) 

Cache server receives ARP request
"Who has 10.0.0.17? Tell 10.0.0.1"
and responds with "10.0.0.17 is at ea:c6:11:05:da:5c".
Thic packet is intercepted at the first switch and sender ip address (cache server)
is changed to 10.0.0.16 (web server).

Host h1 then receives
"10.0.0.16 is at ea:c6:11:05:da:5c". Now he is communicating with h16 via h17.

for this to work we must change iptables rules on cache server:
	sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3128
	sudo iptables -t nat -A POSTROUTING -j MASQUERADE

Cache server will now receive packets on port 80 with destination ip address 10.0.0.16 and and these iptables rules will redirect the packets to port 3128 on which the squid is listening.
Squid will then return content from cache store or will fetch the content from original server based on destination ip address of a packet.

Note: openflow idle_timeout and hard_timeout should match the value of arp cache timeout.
Apr cache timeout (/proc/sys/net/ipv4/neigh/default/gc_stale_time)
This can be set at /etc/sysctl.conf (gc_stale_time 30)

#########################################
		NETWORK LOAD MONITORING
#########################################
For monitoring we are using Open Source tool called Bandwidth Monitor NG (bwm-ng)
https://github.com/vgropp/bwm-ng

Our settings:
bwm-ng --output html --unit bytes -T sum --outfile /home/ubuntu/mag/netrk_stats.html --interfaces %lo,eth0,docker0,ovs-system,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15 --sumhidden 0 --daemon 1



Mobillity models:

Random wazpoint
Hierarchical clustering

